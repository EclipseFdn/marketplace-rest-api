<?xml version="1.0" encoding="UTF-8" ?>
<!--
 Licensed to the Apache Software Foundation (ASF) under one or more
 contributor license agreements.  See the NOTICE file distributed with
 this work for additional information regarding copyright ownership.
 The ASF licenses this file to You under the Apache License, Version 2.0
 (the "License"); you may not use this file except in compliance with
 the License.  You may obtain a copy of the License at

     http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-->

<schema name="mpc_data" version="1.6">

   <!-- If you remove this field, you must _also_ disable the update log in solrconfig.xml
      or Solr won't start. _version_ and update log are required for SolrCloud
   -->
	<field name="_version_" type="long" indexed="true" stored="true" />
   
   <!-- points to the root document of a block of nested documents. Required for nested
      document support, may be removed otherwise
   -->
	<field name="_root_" type="string" indexed="true" stored="false" />

   <!-- Only remove the "id" field if you have a very good reason to. While not strictly
     required, it is highly recommended. A <uniqueKey> is present in almost all Solr 
     installations. See the <uniqueKey> declaration below where <uniqueKey> is set to "id".
     Do NOT change the type and apply index-time analysis to the <uniqueKey> as it will likely 
     make routing in SolrCloud and document replacement in general fail. Limited _query_ time
     analysis is possible as long as the indexing process is guaranteed to index the term
     in a compatible way. Any analysis applied to the <uniqueKey> should _not_ produce multiple
     tokens
   -->
	<field name="id" type="string" indexed="true" stored="true" required="true" multiValued="false" /> 

   <!-- Dynamic field definitions allow using convention over configuration
       for fields via the specification of patterns to match field names. 
       EXAMPLE:  name="*_i" will match any field ending in _i (like myid_i, z_i)
       RESTRICTION: the glob-like pattern in the name attribute must have
       a "*" only at the start or the end.  -->

	<dynamicField name="*_i" type="int" indexed="true" stored="true" />
	<dynamicField name="*_is" type="int" indexed="true" stored="true" multiValued="true" />
	<dynamicField name="*_s" type="string" indexed="true" stored="true" />
	<dynamicField name="*_ss" type="string" indexed="true" stored="true" multiValued="true" />
	<dynamicField name="*_l" type="long" indexed="true" stored="true" />
	<dynamicField name="*_ls" type="long" indexed="true" stored="true" multiValued="true" />
	<dynamicField name="*_t" type="text_general" indexed="true" stored="true" />
	<dynamicField name="*_txt" type="text_general" indexed="true" stored="true" multiValued="true" />
	<dynamicField name="*_en" type="text_en" indexed="true" stored="true" multiValued="true" />
	<dynamicField name="*_b" type="boolean" indexed="true" stored="true" />
	<dynamicField name="*_bs" type="boolean" indexed="true" stored="true" multiValued="true" />
	<dynamicField name="*_f" type="float" indexed="true" stored="true" />
	<dynamicField name="*_fs" type="float" indexed="true" stored="true" multiValued="true" />
	<dynamicField name="*_d" type="double" indexed="true" stored="true" />
	<dynamicField name="*_ds" type="double" indexed="true" stored="true" multiValued="true" />

   <!-- Type used to index the lat and lon components for the "location" FieldType -->
	<dynamicField name="*_coordinate" type="tdouble" indexed="true" stored="false" />

	<dynamicField name="*_dt" type="date" indexed="true" stored="true" />
	<dynamicField name="*_dts" type="date" indexed="true" stored="true" multiValued="true" />
	<dynamicField name="*_p" type="location" indexed="true" stored="true" />

   <!-- some trie-coded dynamic fields for faster range queries -->
	<dynamicField name="*_ti" type="tint" indexed="true" stored="true" />
	<dynamicField name="*_tl" type="tlong" indexed="true" stored="true" />
	<dynamicField name="*_tf" type="tfloat" indexed="true" stored="true" />
	<dynamicField name="*_td" type="tdouble" indexed="true" stored="true" />
	<dynamicField name="*_tdt" type="tdate" indexed="true" stored="true" />

	<dynamicField name="ignored_*" type="ignored" multiValued="true" />
	<dynamicField name="*" type="ignored" multiValued="true" />
	<dynamicField name="random_*" type="random" />

 <!-- Field to use to determine and enforce document uniqueness. 
      Unless this field is marked with required="false", it will be a required field
   -->
	<uniqueKey>id</uniqueKey>
  
    <!-- field type definitions. The "name" attribute is
       just a label to be used by field definitions.  The "class"
       attribute and any other attributes determine the real
       behavior of the fieldType.
         Class names starting with "solr" refer to java classes in a
       standard package such as org.apache.solr.analysis
    -->

    <!-- The StrField type is not analyzed, but indexed/stored verbatim.
       It supports doc values but in that case the field needs to be
       single-valued and either required or have a default value.
      -->
	<fieldType name="string" class="solr.StrField" sortMissingLast="true" />

    <!-- boolean type: "true" or "false" -->
	<fieldType name="boolean" class="solr.BoolField" sortMissingLast="true" />

    <!-- sortMissingLast and sortMissingFirst attributes are optional attributes are
         currently supported on types that are sorted internally as strings
         and on numeric types.
       This includes "string","boolean", and, as of 3.5 (and 4.x),
       int, float, long, date, double, including the "Trie" variants.
       - If sortMissingLast="true", then a sort on this field will cause documents
         without the field to come after documents with the field,
         regardless of the requested sort order (asc or desc).
       - If sortMissingFirst="true", then a sort on this field will cause documents
         without the field to come before documents with the field,
         regardless of the requested sort order.
       - If sortMissingLast="false" and sortMissingFirst="false" (the default),
         then default lucene sorting will be used which places docs without the
         field first in an ascending sort and last in a descending sort.
    -->    

    <!--
      Default numeric field types. For faster range queries, consider the tint/tfloat/tlong/tdouble types.

      These fields support doc values, but they require the field to be
      single-valued and either be required or have a default value.
    -->
	<fieldType name="int" class="solr.TrieIntField" precisionStep="0" positionIncrementGap="0" />
	<fieldType name="float" class="solr.TrieFloatField" precisionStep="0" positionIncrementGap="0" />
	<fieldType name="long" class="solr.TrieLongField" precisionStep="0" positionIncrementGap="0" />
	<fieldType name="double" class="solr.TrieDoubleField" precisionStep="0" positionIncrementGap="0" />

    <!--
     Numeric field types that index each value at various levels of precision
     to accelerate range queries when the number of values between the range
     endpoints is large. See the javadoc for NumericRangeQuery for internal
     implementation details.

     Smaller precisionStep values (specified in bits) will lead to more tokens
     indexed per value, slightly larger index size, and faster range queries.
     A precisionStep of 0 disables indexing at different precision levels.
    -->
	<fieldType name="tint" class="solr.TrieIntField" precisionStep="8" positionIncrementGap="0" />
	<fieldType name="tfloat" class="solr.TrieFloatField" precisionStep="8" positionIncrementGap="0" />
	<fieldType name="tlong" class="solr.TrieLongField" precisionStep="8" positionIncrementGap="0" />
	<fieldType name="tdouble" class="solr.TrieDoubleField" precisionStep="8" positionIncrementGap="0" />

    <!-- The format for this date field is of the form 1995-12-31T23:59:59Z, and
         is a more restricted form of the canonical representation of dateTime
         http://www.w3.org/TR/xmlschema-2/#dateTime    
         The trailing "Z" designates UTC time and is mandatory.
         Optional fractional seconds are allowed: 1995-12-31T23:59:59.999Z
         All other components are mandatory.

         Expressions can also be used to denote calculations that should be
         performed relative to "NOW" to determine the value, ie...

               NOW/HOUR
                  ... Round to the start of the current hour
               NOW-1DAY
                  ... Exactly 1 day prior to now
               NOW/DAY+6MONTHS+3DAYS
                  ... 6 months and 3 days in the future from the start of
                      the current day
                      
         Consult the TrieDateField javadocs for more information.

         Note: For faster range queries, consider the tdate type
      -->
	<fieldType name="date" class="solr.TrieDateField" precisionStep="0" positionIncrementGap="0" />

    <!-- A Trie based date field for faster date range queries and date faceting. -->
	<fieldType name="tdate" class="solr.TrieDateField" precisionStep="6" positionIncrementGap="0" />


    <!--Binary data type. The data should be sent/retrieved in as Base64 encoded Strings -->
	<fieldType name="binary" class="solr.BinaryField" />

    <!-- The "RandomSortField" is not used to store or search any
         data.  You can declare fields of this type it in your schema
         to generate pseudo-random orderings of your docs for sorting 
         or function purposes.  The ordering is generated based on the field
         name and the version of the index. As long as the index version
         remains unchanged, and the same field name is reused,
         the ordering of the docs will be consistent.  
         If you want different psuedo-random orderings of documents,
         for the same version of the index, use a dynamicField and
         change the field name in the request.
     -->
	<fieldType name="random" class="solr.RandomSortField" indexed="true" />

    <!-- solr.TextField allows the specification of custom text analyzers
         specified as a tokenizer and a list of token filters. Different
         analyzers may be specified for indexing and querying.

         The optional positionIncrementGap puts space between multiple fields of
         this type on the same document, with the purpose of preventing false phrase
         matching across fields.

         For more info on customizing your analyzer chain, please see
         http://wiki.apache.org/solr/AnalyzersTokenizersTokenFilters
     -->
    <!-- A text field that only splits on whitespace for exact matching of words -->
	<dynamicField name="*_ws" type="text_ws" indexed="true" stored="true" />
	<fieldType name="text_ws" class="solr.TextField" positionIncrementGap="100">
		<analyzer>
			<tokenizer class="solr.WhitespaceTokenizerFactory" />
		</analyzer>
	</fieldType>

    <!-- A general text field that has reasonable, generic
         cross-language defaults: it tokenizes with StandardTokenizer,
   removes stop words from case-insensitive "stopwords.txt"
   (empty by default), and down cases.  At query time only, it
   also applies synonyms. -->
	<dynamicField name="*_txt_gen" type="text_general" indexed="true" stored="false" />
	<fieldType name="text_general" class="solr.TextField" positionIncrementGap="100">
		<analyzer type="index">
			<tokenizer class="solr.StandardTokenizerFactory" />
			<filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" />
			<filter class="solr.LowerCaseFilterFactory" />
		</analyzer>
		<analyzer type="query">
			<tokenizer class="solr.StandardTokenizerFactory" />
			<filter class="solr.StopFilterFactory" ignoreCase="true" words="stopwords.txt" />
			<filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true" />
			<filter class="solr.LowerCaseFilterFactory" />
		</analyzer>
	</fieldType>

    <!-- A text field with defaults appropriate for English: it
         tokenizes with StandardTokenizer, removes English stop words
         (lang/stopwords_en.txt), down cases, protects words from protwords.txt, and
         finally applies Porter's stemming.  The query time analyzer
         also applies synonyms from synonyms.txt. -->
    <dynamicField name="*_txt_en" type="text_en_splitting" indexed="true" stored="false" />
	<fieldType name="text_en" class="solr.TextField" positionIncrementGap="100">
		<analyzer type="index">
			<tokenizer class="solr.StandardTokenizerFactory" />
			<filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_en.txt" />
			<filter class="solr.LowerCaseFilterFactory" />
			<filter class="solr.EnglishPossessiveFilterFactory" />
			<filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt" />
			<filter class="solr.PorterStemFilterFactory" />
		</analyzer>
		<analyzer type="query">
			<tokenizer class="solr.StandardTokenizerFactory" />
			<filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true" />
			<filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_en.txt" />
			<filter class="solr.LowerCaseFilterFactory" />
			<filter class="solr.EnglishPossessiveFilterFactory" />
			<filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt" />
			<filter class="solr.PorterStemFilterFactory" />
		</analyzer>
	</fieldType>

    <!-- A text field with defaults appropriate for English, plus
   aggressive word-splitting and autophrase features enabled.
   This field is just like text_en, except it adds
   WordDelimiterFilter to enable splitting and matching of
   words on case-change, alpha numeric boundaries, and
   non-alphanumeric chars.  This means certain compound word
   cases will work, for example query "wi fi" will match
   document "WiFi" or "wi-fi".
        -->
	<dynamicField name="*_txt_en_split" type="text_en_splitting" indexed="true" stored="false" />
	<fieldType name="text_en_splitting" class="solr.TextField" positionIncrementGap="100"
		autoGeneratePhraseQueries="true">
		<analyzer type="index">
			<tokenizer class="solr.WhitespaceTokenizerFactory" />
        <!-- in this example, we will only use synonyms at query time
        <filter class="solr.SynonymFilterFactory" synonyms="index_synonyms.txt" ignoreCase="true" expand="false"/>
        -->
        <!-- Case insensitive stop word removal.
        -->
			<filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_en.txt" />
			<filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1"
				catenateWords="1" catenateNumbers="1" catenateAll="0" splitOnCaseChange="1" />
			<filter class="solr.LowerCaseFilterFactory" />
			<filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt" />
			<filter class="solr.PorterStemFilterFactory" />
		</analyzer>
		<analyzer type="query">
			<tokenizer class="solr.WhitespaceTokenizerFactory" />
			<filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="true" />
			<filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_en.txt" />
			<filter class="solr.WordDelimiterFilterFactory" generateWordParts="1" generateNumberParts="1"
				catenateWords="0" catenateNumbers="0" catenateAll="0" splitOnCaseChange="1" />
			<filter class="solr.LowerCaseFilterFactory" />
			<filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt" />
			<filter class="solr.PorterStemFilterFactory" />
		</analyzer>
	</fieldType>

    <!-- Less flexible matching, but less false matches.  Probably not ideal for product names,
         but may be good for SKUs.  Can insert dashes in the wrong place and still match. -->
	<dynamicField name="*_txt_en_split_tight" type="text_en_splitting_tight" indexed="true" stored="false" />
	<fieldType name="text_en_splitting_tight" class="solr.TextField" positionIncrementGap="100"
		autoGeneratePhraseQueries="true">
		<analyzer>
			<tokenizer class="solr.WhitespaceTokenizerFactory" />
			<filter class="solr.SynonymFilterFactory" synonyms="synonyms.txt" ignoreCase="true" expand="false" />
			<filter class="solr.StopFilterFactory" ignoreCase="true" words="lang/stopwords_en.txt" />
			<filter class="solr.WordDelimiterFilterFactory" generateWordParts="0" generateNumberParts="0"
				catenateWords="1" catenateNumbers="1" catenateAll="0" />
			<filter class="solr.LowerCaseFilterFactory" />
			<filter class="solr.KeywordMarkerFilterFactory" protected="protwords.txt" />
			<filter class="solr.EnglishMinimalStemFilterFactory" />
        <!-- this filter can remove any duplicate tokens that appear at the same position - sometimes
             possible with WordDelimiterFilter in conjuncton with stemming. -->
			<filter class="solr.RemoveDuplicatesTokenFilterFactory" />
		</analyzer>
	</fieldType>

    <!-- lowercases the entire field value, keeping it as a single token.  -->
	<dynamicField name="*_s_lower" type="lowercase" indexed="true" stored="false" />
	<fieldType name="lowercase" class="solr.TextField" positionIncrementGap="100">
		<analyzer>
			<tokenizer class="solr.KeywordTokenizerFactory" />
			<filter class="solr.LowerCaseFilterFactory" />
		</analyzer>
	</fieldType>

    <!-- since fields of this type are by default not stored or indexed,
         any data added to them will be ignored outright.  -->
	<fieldType name="ignored" stored="false" indexed="false" multiValued="true" class="solr.StrField" />

    <!-- This point type indexes the coordinates as separate fields (subFields)
      If subFieldType is defined, it references a type, and a dynamic field
      definition is created matching *___<typename>.  Alternately, if 
      subFieldSuffix is defined, that is used to create the subFields.
      Example: if subFieldType="double", then the coordinates would be
        indexed in fields myloc_0___double,myloc_1___double.
      Example: if subFieldSuffix="_d" then the coordinates would be indexed
        in fields myloc_0_d,myloc_1_d
      The subFields are an implementation detail of the fieldType, and end
      users normally should not need to know about them.
     -->
	<fieldType name="point" class="solr.PointType" dimension="2" subFieldSuffix="_d" />

    <!-- A specialized field for geospatial search. If indexed, this fieldType must not be multivalued. -->
	<fieldType name="location" class="solr.LatLonType" subFieldSuffix="_coordinate" />
</schema>